import React from 'react';
import PropTypes from 'prop-types';
import DragSortableList from 'react-drag-sortable';
import { withStyles } from 'material-ui/styles';

import withRoot from '../withRoot';
import Header from './Header';
import Outlet from '../../containers/Outlet';
import Add from './Add';

import '../../styles/outlets.css';

const styles = theme => ({
  root: {
    display: 'flex',
    minHeight: '100vh',
    flexDirection: 'column',
    '&::before': {
      display: 'block',
      flex: '0 0 auto',
      content: '\'\'',
      ...theme.mixins.toolbar
    }
  },
  addButton: {
    position: 'fixed',
    bottom: theme.spacing.unit * 3,
    right: theme.spacing.unit * 3,
    zIndex: 2000
  }
});

/*
 * ID generated by react-drag-sortable are a little strange so we add ours
 */
const generateElement = (value, id) => (
  { content: value, index: id }
);

// const getLayoutFromLS = () => {
//   return JSON.parse(localStorage.getItem('layout')) || {};
// };

const saveLayoutToLS = layout => {
  localStorage.setItem('layout', JSON.stringify(layout));
};

const onSort = sortedList => {
  let layout = [];

  sortedList.forEach(value => {
    layout.push({index: value.index, position: value.rank});
  });

  saveLayoutToLS(layout);
};

const Main = ({ classes, firstname, handleAddOutlet, handleUpdateUser, lastname, outlets }) => {
  let outletsCards = [];
  for(const key in outlets)
    outletsCards.push(generateElement(<Outlet id={outlets[key].id} />, outlets[key].id))

  const placeholder = (
    <div className="placeholderContent"> DÃ©poser ici ! </div>
  );

  return (
    <div>
      <Header firstname={firstname} lastname={lastname} handleUpdateUser={handleUpdateUser} />
      <div className={classes.root}>
        <div className="grid clearfix">
          <DragSortableList
            dropBackTransitionDuration={0.3}
            items={outletsCards}
            onSort={onSort}
            placeholder={placeholder}
            type="grid"
          />
        </div>
      </div>
      <Add className={classes.addButton} onSubmit={handleAddOutlet} />
    </div>
  );
};

Main.propTypes = {
  classes: PropTypes.object.isRequired,
  firstname: PropTypes.string.isRequired,
  handleAddOutlet : PropTypes.func.isRequired,
  handleUpdateUser: PropTypes.func.isRequired,
  lastname: PropTypes.string.isRequired
};

export default withRoot(withStyles(styles)(Main));
